<script type="text/javascript">
   dojo.require("dojox.layout.FloatingPane");
   dojo.require("dijit.form.Button");
   dojo.require("dojox.collections.ArrayList");
   dojo.require("dojo.dnd.Source");
   dojo.require("dojo.dnd.Manager");
   dojo.require("dijit.TooltipDialog");
   dojo.require("dijit.TitlePane");
   dojo.require("dijit.InlineEditBox");
   dojo.require("dijit.form.Textarea");
   dojo.require("dijit.form.MatrixEditor");

   var isEditing = false;
   var canSave = <% if(data->is_owner) {
%>
true
<% } else { %>
false
<% } %>;
  var haveWarnings;
  var warningDialog = new dijit.TooltipDialog({
            id: 'myTooltipDialog',
            style: "width: 300px;",
            content:
			    '<b>MCA Problems '
			<% if( data && data->problems && sizeof(data->problems) ) { %>
				+ '[<%=sizeof(data->problems)%>]</b><p/>'
			<% foreach(data->problems; int i; array p) { %>
			   +'<%=(((int)i)+1)%> <%=replace(p[2], "\n", "")%><br>'
  			  <% } %>
			<% } %>
			,
            onMouseLeave: function(){
                dijit.popup.close(warningDialog);
              }
            });

function enableWarnings()
{
	        dojo.connect(dojo.byId('warnings'), 'onmouseover', function(){
				if(haveWarnings)
	            	dijit.popup.open({
		             	popup: warningDialog,
	                	around: dojo.byId('warnings')
	            		});
	 		});
}

function enableDetails()
{
	        dojo.connect(dojo.byId('details'), 'onmouseover', function(){
	            	dijit.popup.open({
		             	popup: dijit.byId('detailsDialog'),
	                	around: dojo.byId('details')
	            		});
	 		});

	        dojo.connect(dijit.byId('detailsDialog'), 'onMouseLeave', function(){
				//	alert(dijit.byId('detailsDialog'));
	            	dijit.popup.close(dijit.byId('detailsDialog'));
	 		});

}

var micDialog;

function enableMatsInCase()
{
	        dojo.connect(dojo.byId('matsincase'), 'onclick', function(){
//				alert("foo");
				if(!micDialog)
				{
					micDialog = new dojox.layout.FloatingPane(
					{id: 'micDialog', title: '<b>Available Mats</b>', //dojo.byId('matsInCaseContainer'),
						dockable: false,
						style: "position:absolute;top:50px;left:50px;width:850px;height:100px;",
						}, dojo.byId('matsInCaseContainer')
						);

								micDialog.close = function() {
								if(!this.closable){ return; } 
				//				 paneClosed();
								 this.hide();
								};

								micDialog.startup();

				}
				
				init();
				micDialog.show();
				
	 		});
}

<% if( data && data->problems && sizeof(data->problems) ) { %>
  haveWarnings = 1;	
<% } %>
  dojo.addOnLoad(enableWarnings);
  dojo.addOnLoad(enableDetails);
  dojo.addOnLoad(enableMatsInCase);

function dndDropComplete(s, n, c)
{
  return;
  var mat = s.getItem(n[0].id).data;
//  var manager = dojo.dnd.Manager();
 // alert("source: " + s);
  replaceMat(row, col, mat);
}

var micDisplayPane;
var displayPaneSource = null;
function paneClosed()
{
dojo.query("#popOutLink").style({ display:"" }); 
var div = micDisplayPane.attr("content");
var div2 = dijit.byId("matsInCaseDisplay");
if(div && div2)
{
  div2.set('content', displayPaneSource);
micDisplayPane.set("content", "");
init();
dijit.byId('matsInCaseDisplay').set('open', true);
dojo.query("#displayContainer").style({ display:"" }); 
dojo.byId("floatcontainer").innerHTML="<div id='float1'></div>";
}
}

function floatMICDisplay()
{

  micDisplayPane.show();
return;
//  dojo.query("#popOutLink").style({ display:"none" }); 
  var div = dojo.byId("matsInCaseContainer");
  if(div)
  {
//displayPaneSource = dijit.byId('matsInCaseDisplay').get('content');
  dijit.byId('matsInCaseDisplay').set('open', false);
  micDisplayPane = new dojox.layout.FloatingPane({
      title: "Available Mats",
      resizable: false,
      dockable: false,
	  content: div,
      style: "position:absolute;top:0;left:0;",
      id: "matsInCaseContainer"
  }, dojo.byId("float1"));
dojo.query("#displayContainer").style({ display:"none" }); 

//  dijit.byId("micDisplayButton").set("enabled", false);
micDisplayPane.close = function() {

if(!this.closable){ return; } 
 paneClosed();
 this.destroyRecursive();
};
 

  micDisplayPane.startup();
  micDisplayPane.show();
//micDisplayPane.connect(this, "onclose", function(){alert("close");})
  }
}

// based on dojo.dnd.Source.checkAcceptance()
function checkAcceptanceWithoutSelfDrop(source, nodes){
//alert("checkAcceptance: " + this==source);
    if(this == source){ return false; }
//	console.log(this.accept + " is acceptable!");
		for(var i = 0; i < nodes.length; ++i){
			var item = source.getItem(nodes[i].id)
                        var type = item.type;
console.log("item " + nodes[i].id + " type is " + type);
			// type instanceof Array
			var flag = false;
			for(var j = 0; j < type.length; ++j){
				if(type[j] in this.accept){
console.log(this.accept + " is acceptable!");
					flag = true;
					break;
				}
			}
			if(!flag){
				return false;	// Boolean
			}
		}
		return true;	// Boolean
	}


	// create the DOM representation for the given item
	function micNodeCreator(item, hint) {
		// create a table/tr/td-based node structure; each item here needs an
		// image, a name, a brief description, and a quantity available
		var nameTd = document.createElement("span");
		nameTd.id = item.id || ("dnd" + item.type + item.character);
		var n;

		if(item.style == "U")
  		  n = (document.createElement("u"));
		else if(item.style == "S")
  		  n = (document.createElement("smallcaps"));
		else if(item.style == "I")
  		  n = (document.createElement("i"));
		else if(item.style == "B")
  		  n = (document.createElement("b"));

		var y = document.createTextNode((" " + item.character) || "N/A");

		if(n)
		{
		   n.appendChild(y);
		}
		else n = y;

		nameTd.appendChild(n);

		dojo.addClass(nameTd, "cell");

		if (hint != "avatar") {
		}else{
			// put the avatar into a self-contained table
			var table = document.createElement("table");
			var tbody = document.createElement("tbody");
			var tr = document.createElement("tr");
			var td = document.createElement("td");
			td.appendChild(nameTd);
			tr.appendChild(td);
			tbody.appendChild(tr);
			table.appendChild(tbody);
			node = table;
		}

		item.id = "2dnd" + item.type + item.character;
		
		return {node: nameTd, data: item, id: "3dnd" + item.type + item.character, type: item.type};
	};


function processExternalDrop(source, nodes, copy)
{
		var target = this;
		var oldid;
		var oldCreator = this._normalizedCreator;
		// transferring nodes from the source to the target
		var sourcenode = source.getItem(nodes[0].id);
		oldid = nodes[0].id;
		
		// move nodes
		target._normalizedCreator = function(node, hint){
			source.delItem(node.id);
			var n = node.cloneNode(true);
			// node.removeChild(node.children[0]);
	  	  	n.id = (target.node.id.replace('dnd-', ''));
			source.delItem(n.id);
//			target.delItem(n.id);
			return {node: n, id: n.id, data: sourcenode.data, type: "X"};
		};

		var an = target.getAllNodes();
        var isMove = 0;

		dojo.forEach(an, function(n){ 
			if(dojo.indexOf(source.getItem(nodes[0].id).type, 'X') != -1)
			{
			  // drop from within the grid
				//alert("drop from in grid.");
				moveMat(n.id, nodes[0].id); 
				isMove = 1;
			}
			else
			{
			  //alert("drop from outside the grid.");
			  // drop from outside the grid (aka, the available mats list)
				replaceMat(n.id, target.getItem(n.id), source.getItem(nodes[0].id)); 				
			}
		});			

		oldid = source.node.id.replace('dnd-', '');

		if(isMove)
		{
			source.creator=micNodeCreator;
		    source.selectAll();
			source.deleteSelectedNodes();
			source.clearItems();
			source.insertNodes(true, ([{ mat: '', character:'', 'data': '', id: source.node.id.replace('dnd-', ''), type: 'R'}]));
		}
		else
		{
			source.deleteSelectedNodes();
		}
		
	    target.selectAll();
		target.deleteSelectedNodes();
		target.clearItems();
		target.insertNodes(true, nodes);

/*		
		if(!copy && this.creator){
			source.deleteSelectedNodes();
		}

		this.selectNone();
		if(!copy && !this.creator){
			source.selectNone();
		}
*/
		this._normalizedCreator = oldCreator;
}

function saveMat(wgt)
{
//alert("saveMat");
  isEditing = false;
  dojo.xhrPost({ widget: wgt, content: {matrix: wgt.getValue()}, url: "/mca/setMat?col=" + wgt.column + "&row=" + wgt.row + "&xmatrix=" + wgt.getValue(),
					load: function(response, ioArgs){wgt.setNewVal();} 
	});
	
	if(canSave)
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = false} );
	else
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = true} );
	
}

function replaceMat(pos, data, newmat)
{
  isEditing = false;
  dojo.xhrPost({ url: "/mca/replaceMat?pos=" + pos + "&matrix=" + encodeURIComponent(dojo.toJson(newmat)),
					load: function(response, ioArgs){} 
	});

	if(canSave)
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = false} );
	else
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = true} );
}

function moveMat(newpos, oldpos)
{
  isEditing = false;
  dojo.xhrPost({ url: "/mca/moveMat?from=" + oldpos + "&to=" + newpos,
					load: function(response, ioArgs){} 
	});

	if(canSave)
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = false} );
	else
	   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = true} );
}


function cancelMat(wgt)
{
  isEditing = false;
//  wgt.close();
}



function openWidget(v, row, col, units)
{
  if(this.isEditing == true) { return; }
  this.isEditing = true;

  // get the mat element, set it to be the contents of the widget div, then create the widget
  dojo.xhrGet({ url: "/mca/getMat?col=" + col + "&row=" + row, handleAs: "xml", load: function(response, ioArgs){ 

    var me = new dijit.TooltipDialog(({id: v.id}));
    var e = new dijit.form.MatrixEditor(({srcId: v.id, row: row, column: col, default_set_width: units, onSave: saveMat, onCancel: cancelMat, mat: response, popup: me}));
    me.set('content', e);
	dijit.popup.open({ popup: me, around: dojo.byId(v.id) });
    dojo.connect(me, "onClose", function(){ isEditing = false; });
  }});
}

function saveDescription(id, value)
{
dojo.xhrPost({ content: {description: value}, url: "/mca/saveDescription",
					load: function(response, ioArgs){
					
					if(canSave)
					   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = false} );
					else
					   dojo.forEach(dojo.query(".SaveButton"), function(e){ e.disabled = true} );
										
					} 
	});

}
</script>

<h1>Layout: <b><%=data->mca->name%></b> &nbsp; Default Wedge: <b><%=data->mca->wedge%></b> &nbsp;</h1>
<div id="warnings" style="float:right; margin:2px; padding:0px;">
<% if( data && data->problems && sizeof(data->problems) ) { %>
  <img style="padding:0px" src="<%#context_root%>static/images/warning.png"/>
<% } else { %>
  <img style="padding:0px" src="<%#context_root%>static/images/nowarning.png"/>
<% } %>
</div>
<div id="details" style="float:right; margin:1px; padding:0px;; padding-right: 3px;">
<img style="padding:0px" src="<%#context_root%>static/images/details.png"/>
</div>

<div id="matsincase" style="float:right; margin:1px; padding:0px;; padding-right: 3px;">
<img style="padding:0px" src="<%#context_root%>static/images/font.png"/>
</div>

<div>
  <%#action_link "action": "cancel"%>
<button href="<%#action_url "action": "cancel"%>">Cancel</button>
</a>
&nbsp;
<%#action_link "action": "save", "args": data->now%>
<button class="SaveButton" href="<%#action_url "action": "save", "args": data->now%>" disabled="true">Save</button>
</a>
</div>
<p>

<!-- mats in case was here. -->

<p>
	<style>
	div.cell {
		font-size: 13pt; width:35px; height:35px; 
border-width:1px; border-style: solid; position:relative; float:left; 
line-height: 15.5px;
	}
	input.mine { border-width:1px; border-style: solid; border-color: background-color: #dddddd; }
	</style>

<style type="text/css">
.dijitArrowButton {
  display: block;
}
</style>
<div style="clear: left;">
<div class="cell"><font style="color:grey"><%=data->wedge->name%></font></div>
<%foreach(data->cols; int k; string v){%>
<div class="cell"><b><%=v%></b></div>
<%}%>
<div class="cell"><font style="color:grey"><%=data->wedge->name%></font></div>
</div>

<%
  foreach(data->rows; int k; int v){
	int u = data->wedge->bars[v];
%>
<div style="clear: left">
	<!-- the first div is the row number with the unit width for that row from the default wedge -->
<div class="cell"
><b><%=v%></b><br/><font style="color: grey"><%=u%>U</font></div>
<%
  foreach(data->cols;int ck; string cv){
		mapping row = data->mca->matcase[cv];
		string ch = "";
		string st = "";
		if(row) 
		{
			object mat = row[v];
			if(mat) 
			{ 
			  ch = mat->character;

			  if(u != (int)mat->set_width) 
   			    st = "style=\"background: yellow\"";

			  if(mat->is_js)
		  	    ch = "<img src=\"/static/images/js.png\">";
			  else if(mat->is_fs)
		  	  	ch = "<img src=\"/static/images/fs.png\">";
			  else
			  {
				switch(mat->style)
				{
					case "B":
						ch = "<b>" + ch + "</b>";
						break;
					case "U":
						ch = "<u>" + ch + "</u>";
						break;
					case "S":
						ch = "<tt>" + ch + "</tt>";
						break;
					case "I":
						ch = "<i>" + ch + "</i>";
						break;
					case "R":
					default:
						break;
				}
			  }
			}
		}
%>

<div class="cell" dojoType="dojo.dnd.Source" dojoId='<%=v + cv%>' id='dnd-<%=v + cv%>' <%=st%> accept="X,R,I,B,S,U" delay="3" onDropExternal="processExternalDrop" onClick="openWidget(this, <%=v%>, '<%=cv%>', <%=u%>)" >
  <div class="dojoDndItem" id='<%=v + cv%>' dndtype="X"><%=ch%></div>
</div>
	<%}%>
</div>

<div class="cell"
><b><%=v%></b><br/><font style="color: grey"><%=u%>U</font></div>

	<p/>
<%}	%>
<p>
<script type="text/javascript">
var connected;
function loadStyle(elements, style)
{
  //alert("style: " + style);
  dojo.byId('matsInCaseNode' + style).innerHTML='';
		wishlist = new dojo.dnd.Source("matsInCaseNode" + style,
			{isSource:true, copyOnly: true, 
                          creator: micNodeCreator, accept: [style]}

);
		wishlist.checkAcceptance = checkAcceptanceWithoutSelfDrop;

		// we only need to connect the first one; the others will get it automatically.
		if(!connected)
        {
  		  dojo.connect(wishlist, "onDndDrop", dndDropComplete);
                  connected = 1;
        }
		wishlist.clearItems();
		var al = new dojox.collections.ArrayList();
		for(var i = 0; i < elements.length; i++)
		{
		   al.add({'mat': elements[i], 'data': elements[i], 'character': elements[i], 'style': style, id: '4dnd' + style + elements[i], type: ([style])});
		}
		wishlist.insertNodes(false, al.toArray());

}

	function init() {
  	  var wishlist, mic, connected;
	  connected = 0;
	  if(displayPaneSource == null) displayPaneSource = micDialog.get('content');

	  dojo.xhrPost({handleAs: "json", url: "/mca/notInCase",
						load: function(response, ioArgs){
						
						for(var key in response)
						{
						   loadStyle(response[key], key);
						}		
					}
				});


  };
//	dojo.addOnLoad(init);
</script>

<div style="left:5px; clear:left">
<%#action_link "action": "cancel"%>
<button href="<%#action_url "action": "cancel"%>">Cancel</button>
</a>		
<%#action_link "action": "save", "args": data->now%>
	<button  class="SaveButton" href="<%#action_url "action": "save", "args": data->now%>" disabled="true">Save</button>
</a> &nbsp;


<div id="matsInCaseContainer" style="display:none">
<div style="margin:10px;">
<div id="matsInCaseNodeQ" dojoId="matsInCaseNodeQ" xdojoType="dojo.dnd.Source" accept="Q" style="position:relative; float:left" class="container"></div>
<div style="clear: left;">
<div style="position:relative; float:left">Roman: </div>
<div id="matsInCaseNodeR" dojoId="matsInCaseNodeR" xdojoType="dojo.dnd.Source" accept="R" style="position:relative; float:left" class="container"></div>
</div>
<div style="clear: left;">
<div style="position:relative; float:left">Italic: </div>
<div id="matsInCaseNodeI" dojoId="matsInCaseNodeI" xdojoType="dojo.dnd.Source" accept="I" style="position:relative; float:left" class="container"></div>
</div>
<div style="clear: left;">
<div style="position:relative; float:left">Bold: </div>
<div id="matsInCaseNodeB" dojoId="matsInCaseNodeB" xdojoType="dojo.dnd.Source" accept="B" style="position:relative; float:left" class="container"></div>
</div>
<div style="clear: left;">
<div style="position:relative; float:left">Small Caps: </div>
<div id="matsInCaseNodeS" dojoId="matsInCaseNodeS" xdojoType="dojo.dnd.Source" accept="S" style="position:relative; float:left" class="container"></div>
</div>
</div>




<div dojoType='dijit.TooltipDialog' id='detailsDialog' style="display: none; width:300px">
<b>MCA Description</b><p>

<span dojoType='dijit.InlineEditBox' editor='dijit.form.Textarea'  title='Description'>
<script type='dojo/connect' event='onChange' args='value'>
                  console.log(this.id + ' changed to value ' + value);
                                saveDescription(this.id, value);
             </script>
<%=data->description%></span>
<p/>
<i>Click the description to edit; click here to save.</i>
</div>
</div>
</div>
